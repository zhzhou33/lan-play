{
    "editor.fontFamily": "SauceCodePro Nerd Font Mono",
    "editor.fontSize": 18,
    "editor.formatOnSave": true,
    // "[cpp]": {
    //     "editor.defaultFormatter": "llvm-vs-code-extensions.vscode-clangd"
    // },
    "debug.console.fontSize": 18,
    "terminal.integrated.fontSize": 20,
    "clangd.path": "/home/zhzhou33/.vscode-server/data/User/globalStorage/llvm-vs-code-extensions.vscode-clangd/install/18.1.3/clangd_18.1.3/bin/clangd",
    "cmake.cmakePath": "/usr/bin/cmake",
    "cmake.generator": "Unix Makefiles",
    // Clangd 运行参数(在终端/命令行输入 clangd --help-list-hidden 可查看更多)
    "clangd.arguments": [
        "--all-scopes-completion", // 全局补全(补全建议会给出在当前作用域不可见的索引,插入后自动补充作用域标识符),例如在main()中直接写cout,即使没有`#include <iostream>`,也会给出`std::cout`的建议,配合"--header-insertion=iwyu",还可自动插入缺失的头文件
        "--background-index", // 后台分析并保存索引文件
        "--clang-tidy", // 启用 Clang-Tidy 以提供「静态检查」，下面设置 clang tidy 规则
        "--clang-tidy-checks=performance-*, bugprone-*, misc-*, google-*, modernize-*, readability-*, portability-*",
        "--compile-commands-dir=${workspaceFolder}/build/", // 编译数据库(例如 compile_commands.json 文件)的目录位置
        "--completion-parse=auto", // 当 clangd 准备就绪时，用它来分析建议
        "--completion-style=detailed", // 建议风格：打包(重载函数只会给出一个建议);还可以设置为 detailed
        // "--query-driver=/usr/bin/clang++", // MacOS 上需要设定 clang 编译器的路径，homebrew 安装的clang 是 /usr/local/opt/llvm/bin/clang++
        // 启用配置文件(YAML格式)项目配置文件是在项目文件夹里的“.clangd”,用户配置文件是“clangd/config.yaml”,该文件来自:Windows: %USERPROFILE%\AppData\Local || MacOS: ~/Library/Preferences/ || Others: $XDG_CONFIG_HOME, usually ~/.config
        "--enable-config",
        "--fallback-style=LLVM", // 默认格式化风格: 在没找到 .clang-format 文件时采用,可用的有 LLVM, Google, Chromium, Mozilla, Webkit, Microsoft, GNU
        "--function-arg-placeholders=true", // 补全函数时，将会给参数提供占位符，键入后按 Tab 可以切换到下一占位符，乃至函数末
        "--header-insertion-decorators", // 输入建议中，已包含头文件的项与还未包含头文件的项会以圆点加以区分
        "--header-insertion=iwyu", // 插入建议时自动引入头文件 iwyu
        // "--include-cleaner-stdlib", // 为标准库头文件启用清理功能(不成熟!!!)
        "--log=verbose", // 让 Clangd 生成更详细的日志
        "--pch-storage=memory", // pch 优化的位置(Memory 或 Disk,前者会增加内存开销，但会提升性能)
        "--pretty", // 输出的 JSON 文件更美观
        "--ranking-model=decision_forest", // 建议的排序方案：hueristics (启发式), decision_forest (决策树)
        "--query-driver=/usr/bin/clang++", // windows下的mingw位置
        "-j=12", // 同时开启的任务数量
        // "--target=x86_64-w64-mingw32"
    ],
    // Clangd 找不到编译数据库(例如 compile_flags.json 文件)时采用的设置,缺陷是不能直接索引同一项目的不同文件,只能分析系统头文件、当前文件和include的文件
    "clangd.fallbackFlags": [
        "-std=c++17",
        "-I${workspaceFolder}/src/includes",
        "-I/usr/include/c++/11",
        "--target=x86_64-linux-gnu", // 默认使用window gcc(MinGW),如果你是linux，就改成"--target=x86_64-linux-gnu"
    ],
    "C_Cpp.clang_format_path": "${workspaceRoot}/.clang-format",
    "C_Cpp.formatting": "clangFormat",
    "C_Cpp.clang_format_fallbackStyle": "LLVM",
    "editor.formatOnType": true,
    /********
    * LLDB *
    ********/
    // LLDB 指令自动补全
    "lldb.commandCompletions": true,
    // LLDB 指针显示解引用内容
    "lldb.dereferencePointers": true,
    // LLDB 鼠标悬停在变量上时预览变量值
    "lldb.evaluateForHovers": true,
    // LLDB 监视表达式的默认类型
    "lldb.launch.expressions": "native",
    // LLDB 不显示汇编代码
    "lldb.showDisassembly": "never",
    // LLDB 生成更详细的日志
    "lldb.verboseLogging": true,
}